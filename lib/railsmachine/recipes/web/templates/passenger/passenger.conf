##
## passenger.conf -- Passenger configuration file
##
## 


# This is the Passenger configuration file.  It contains the
# configuration directives for Passenger. See
# <URL:http://www.modrails.com/documentation/Users guide.html> 
# for detailed information about the directives.

# Load the Passenger module into Apache. 
LoadModule passenger_module /usr/lib<%= arch %>/ruby/gems/1.8/gems/passenger-<%= version %>/ext/apache2/mod_passenger.so


# Set the location of Passenger.
PassengerRoot /usr/lib<%= arch %>/ruby/gems/1.8/gems/passenger-<%= version %>


# Tell Passenger which Ruby to use. 
PassengerRuby <%= rubypath %>


# Specify how much information Phusion Passenger should write to the 
# Apache error log file. A higher log level value means that more 
# information will be logged. 
# 
#  0: Show only errors and warnings. This is the default setting.
#  1: Show the most important debugging information. This might be useful 
#     for system administrators who are trying to figure out the cause 
#     of a problem.
#  2: Show more debugging information. This is typically 
#     only useful for developers.
#  3: Show even more debugging information.

# PassengerLogLevel 0



# Enable User Switching Support. This option starts your application 
# as the owner of the file config/environment.rb. The owner of 
# environment.rb must have read access to the Rails application's 
# folder, and read/write access to the Rails application's logs folder. 
# This feature is only available if Apache is started by root.
#
# Options: <on|off>

# PassengerUserSwitching on



# Specify the user Passenger must run as. This option allows you
# to specify which user your application will run as if user 
# switching fails or is disabled.

# PassengerDefaultUser deploy



# Set the maximum number of application instances that can be 
# simultaneously active. A larger number results in higher 
# memory usage, but improved ability to handle concurrent HTTP clients.
# The optimal value depends on your system's hardware and the server's 
# average load. You should experiment with different values. Generally 
# speaking, the value should be at least equal to the number of CPUs 
# (or CPU cores) that you have. If your system has 2 GB of RAM, then 
# we recommend a value of 30. If your system is a Virtual Private 
# Server (VPS) and has about 256 MB RAM, and is also running other 
# services such as MySQL, then we recommend a value of 2.

# PassengerMaxPoolSize 2



# Set the maximum number of application instances that may 
# be simultaneously active for a single application. This helps to 
# make sure that a single application will not occupy all available 
# slots in the application pool. This value must be less than 
# PassengerMaxPoolSize. A value of 0 means that there is no limit 
# placed on the number of instances a single application may use, 
# i.e. only the global limit of PassengerMaxPoolSize will be enforced.

# PassengerMaxInstancesPerApp 0


# Set the maximum number of seconds that your application instance
# may be idle. That is, if an application instance hasn't done anything 
# after the given number of seconds, then it will be shutdown in order 
# to conserve memory. Decreasing this value means that applications 
# will have to be spawned more often. Since spawning is a relatively 
# slow operation, some visitors may notice a small delay when they 
# visit your website. However, it will also free up resources used by 
# applications more quickly. The optimal value depends on the average 
# time that a visitor spends on a single Rails/Rack web page. We 
# recommend a value of 2 * x, where x is the average number of seconds 
# that a visitor spends on a single web page. But your mileage may vary.

# PassengerPoolIdleTime 300



# Set whether Phusion Passenger should automatically detect whether 
# a virtual host's document root is a Ruby on Rails application. 
# The default is on.
# Options: <on|off>

# RailsAutoDetect on